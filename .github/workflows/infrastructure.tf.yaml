name: '[tf] Infrastructure üèóÔ∏è'
on:
  pull_request:
    branches:
      - main
    paths:
      - .github/workflows/infrastructure.tf.yaml
      - infrastructure/**
  push:
    branches:
      - main
    paths:
      - .github/workflows/infrastructure.tf.yaml
      - infrastructure/**
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write # To write comments
  id-token: write

jobs:
  automated-plan-apply:
    environment: 10-pm
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: infrastructure
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 #v4.2.2
      
      - name: Setup Terraform 
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd #v3.1.2
        with:
          terraform_version: 1.10.0
      
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
      
      - name: Terraform Init
        id: init
        run: terraform init -backend-config=config.auto.tfvars
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
      
      - name: Terraform Apply
        if: ${{ github.event.ref == 'refs/heads/main' || github.event.ref == 'refs/heads/dev'}}
        run: terraform apply -auto-approve -input=false
      
      - uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea #v7.0.1
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = ` ### Automated Terraform Plan
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Env: \`${{ env.ENVIRONMENT }}\`, Workflow: \`${{ github.workflow }}\`*`;
            const contentPlan = process.env.PLAN

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              if (contentPlan.includes("No changes. Your infrastructure matches the configuration.")) {
                github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id
                })
              } else {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
                })
              }
            } else {
              if (contentPlan.includes("No changes. Your infrastructure matches the configuration.") == false) {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })
              }
            }